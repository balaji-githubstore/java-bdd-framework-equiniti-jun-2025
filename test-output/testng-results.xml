<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="1" passed="0" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-06-26T10:32:38 IST" name="Default suite" finished-at="2025-06-26T10:32:39 IST" duration-ms="843">
    <groups>
      <group name="cucumber">
        <method signature="AbstractTestNGCucumberTests.runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:com.eq.runner.RunnerTest@7c6908d7]" name="runScenario" class="io.cucumber.testng.AbstractTestNGCucumberTests"/>
      </group> <!-- cucumber -->
    </groups>
    <test started-at="2025-06-26T10:32:38 IST" name="Default test" finished-at="2025-06-26T10:32:39 IST" duration-ms="843">
      <class name="com.eq.runner.RunnerTest">
        <test-method is-config="true" signature="setUpClass(org.testng.ITestContext)[pri:0, instance:com.eq.runner.RunnerTest@7c6908d7]" started-at="2025-06-26T10:32:38 IST" name="setUpClass" finished-at="2025-06-26T10:32:39 IST" duration-ms="595" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@402f80f5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:com.eq.runner.RunnerTest@7c6908d7]" started-at="2025-06-26T10:32:39 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2025-06-26T10:32:39 IST" duration-ms="154" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Add Valid Employee"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Employee"]]>
              </value>
            </param>
          </params>
          <exception class="io.cucumber.testng.UndefinedStepException">
            <message>
              <![CDATA[The step 'I click on PIM menu' and 5 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@When("I click on PIM menu")
public void i_click_on_pim_menu() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I click on add employee")
public void i_click_on_add_employee() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I fill the employee form")
public void i_fill_the_employee_form(io.cucumber.datatable.DataTable dataTable) {
    // Write code here that turns the phrase above into concrete actions
    // For automatic transformation, change DataTable to one of
    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or
    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,
    // Double, Byte, Short, Long, BigInteger or BigDecimal.
    //
    // For other transformations you can register a DataTableType.
    throw new io.cucumber.java.PendingException();
}
@When("I click on save employee")
public void i_click_on_save_employee() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("I should get the profile name as {string}")
public void i_should_get_the_profile_name_as(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("I should get the personal details form filled with added data")
public void i_should_get_the_personal_details_form_filled_with_added_data() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.cucumber.testng.UndefinedStepException: The step 'I click on PIM menu' and 5 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@When("I click on PIM menu")
public void i_click_on_pim_menu() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I click on add employee")
public void i_click_on_add_employee() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I fill the employee form")
public void i_fill_the_employee_form(io.cucumber.datatable.DataTable dataTable) {
    // Write code here that turns the phrase above into concrete actions
    // For automatic transformation, change DataTable to one of
    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or
    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,
    // Double, Byte, Short, Long, BigInteger or BigDecimal.
    //
    // For other transformations you can register a DataTableType.
    throw new io.cucumber.java.PendingException();
}
@When("I click on save employee")
public void i_click_on_save_employee() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("I should get the profile name as {string}")
public void i_should_get_the_profile_name_as(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("I should get the personal details form filled with added data")
public void i_should_get_the_personal_details_form_filled_with_added_data() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

at âœ½.I click on PIM menu(file:///D:/Balaji/Company/Equiniti%20Jun%202025%20Java/automation_workspace/EmployeeManagementBDD/src/test/resources/feature/Employee.feature:12)
]]>
            </full-stacktrace>
          </exception> <!-- io.cucumber.testng.UndefinedStepException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method is-config="true" signature="tearDownClass()[pri:0, instance:com.eq.runner.RunnerTest@7c6908d7]" started-at="2025-06-26T10:32:39 IST" name="tearDownClass" finished-at="2025-06-26T10:32:39 IST" duration-ms="33" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- com.eq.runner.RunnerTest -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
